!init OPT_LOOK="akopia"; OPT_STYLE="manual"
# $Id: icadminref.sdf,v 1.1 2001-04-23 20:15:00 alison Exp $

!define DOC_NAME "Interchange Back Office"
!define DOC_TYPE ""
!define DOC_CODE "icbackoffice"
!define DOC_VERSION substr('$Revision: 1.1 $',11, -2)
!define DOC_STATUS "Draft"
!define DOC_PROJECT "Interchange"
!define DOC_URL "http://help.akopia.com/interchange/doc/icbackoffice.html"
!build_title

H1: Interchange Back Office

Interchange is the industry's most widely distributed and implemented open source e-commerce platform. This document describes how to administer a commerce site with Interchange's back-office functionality, and discusses site management and security.

H1: Tracking and Back-End Order Entry

Interchange allows the entry of orders into a system through one of several methods. The C<AsciiBackend> capability allows submission of parameters to an external order entry script. Support for SQL allows the entry of orders directly into an SQL database. Orders can be written to an ASCII file. They can be formatted precisely for e-mail-based systems. The orders can be placed in a DBM file. Finally, embedded Perl allows completely flexible order entry, including real-time credit card verification and settlement.

H2: ASCII Backup Order Tracking

If C<AsciiTrack> is set to a legal file name (based in VendRoot unless it has a leading "/"). A copy of the order is saved and sent in an e-mail.

If the file name string begins with a pipe "|," a program will be run and the output "piped" to that program. This allows easy back-end entry of orders with an external program.

H2: Database Tracking

Once the order report is processed, the order is complete. Therefore, it is the ideal place to put Interchange tags that make order entries in database tables.

A good model is to place a single record in a database summarizing the order and a series of lines that correspond to each line item in the order. This can be in the same database table. If the order number itself is the key for the summary, a line number can be appended to the order number to show each line of the order.

The following would summarize a sample order number S00001 for part number 00-0011 and 99-102:

!block example
   code     order_number part_number  quantity   price    shipping  tax
   S00001   S00001                    3          2010     12.72     100.50
   S00001-1 S00001       00-0011      2          1000     UPS       yes
   S00001-2 S00001       99-102       1          10       UPS       yes
!endblock

Fields can be added where needed, perhaps with order status, shipping tracking number, address, customer number, or other information.

The above is accomplished with Interchange's C<[import ....]> tag using the convenient C<NOTES> format:

!block example
   [set import_status]
   [import table=orders type=LINE continue=NOTES]

   code: [value mv_order_number]
   order_number: [value mv_order_number]
   quantity: [nitems]
   price: [subtotal noformat=1]
   shipping: [shipping noformat=1]
   tax: [salestax noformat=1]

   [/import]

   [item-list]
   [import table=orders type=LINE continue=NOTES]

   code: [value mv_order_number]-[item-increment]
   order_number: [value mv_order_number]
   quantity: [item-quantity]
   price: [item-price noformat=1]
   shipping: [shipping-description]
   tax: [if-item-field nontaxable]No[else]Yes[/else][/if]

   [/import][/item-list]
!endblock

H2: Custom Order Routing

Interchange can send order emails and perform custom credit card charges and/or logging for each item. The Route directive is used to control this behavior, along with the C<mv_order_route> item attribute and C<mv_order_route> form variable.

Routes are established with the C<Route> directive, which is similar to the C<Locale> directive. Each route is like a locale, so that key-value pairs can be set. Here is an example setting:

!block example
   Route  VEN  pgp_key         0x67798115
   Route  VEN  email           orders@akopia.com
   Route  VEN  reply           service@akopia.com
   Route  VEN  encrypt         1
   Route  VEN  encrypt_program "/usr/bin/pgpe -fat -q -r %s"
   Route  VEN  report          etc/report_mail
!endblock

This route would be used whenever the value C<VEN> was contained in the form variable C<mv_order_route>.

The last route that is defined provides the defaults for all other routes. For example, if C<encrypt_program> is set there, then the same value will be the default for all routes.

The attributes that can be set are:

LI1: attach
.Determines whether the order report should be attached to the main order report e-mail. This is useful if certain items must be printed separately from others, perhaps for FAX to a fulfillment house.

LI1: counter
.The location of a counter file which should be used instead of C<OrderCounter> for this route. It will generate a different value for C<mv_order_number> for the route.

LI1: credit_card
.Determines whether credit card encryption should be done for this order. Either this or C<encrypt> should always be set.

LI1: cybermode
.If this is set, enables I<CyberCash> for the route. Variables can also be set for C<CYBER_CONFIGFILE>, C<CYBER_SECRET>, and all other normal CYBERCASH variables. For example:

!block example; listitem=2
   Route VEN cybermode         mauthonly
   Route VEN CYBER_CONFIGFILE  config/vendor1_cfg
   Route VEN CYBER_VERSION     3.2
!endblock

LI1: email
.The email address(es) where the order should be sent. Set just like the C<MailOrderTo> directive, which is also the default.

LI1: encrypt
.Whether the entire order should be encrypted with the B<encrypt_program>.
If C<credit_card> is set, the credit card will first be encrypted, then the entire order encrypted.

LI1: encrypt_program
.The encryption program incantaton which should be used. Set identically to the C<EncryptProgram> directive, except that %s will be replaced with the C<pgp_key>. Default is C<pgpe -fat -r %s>.

LI1: errors_to
.Sets the C<Errors-To:> e-mail header so that bounced orders will go to the proper address. Default is the same as C<MailOrderTo>.

LI1: increment
.Whether the order number should be incremented as a result of this result. Default is not to increment, as the order number should usually be the same for different routes within the same customer order.

LI1: individual_track
.A directory where individual order tracking files will be placed. The file name will correspond to the value of C<mv_order_number>. This can be useful for batching orders via download.

LI1: individual_track_ext
.The extension that will be added to the file name for C<individual_track>.
Must contain a period (C<.>), if that is desired.

!block example
   individual_track_ext     .pgp
!endblock

LI1: pgp_cc_key
.The PGP key selector that is used to determine which public key is used for encryption of credit cards only. With PGP 5 and 6, see appropriate values by using the command C<pgpk -l>.

LI1: pgp_key
.The PGP key selector that is used to determine which public key is used for encryption. If C<pgp_cc_key> is set, that key will be used for credit card encryption instead of C<pgp_key>. With PGP 5 and 6, see appropriate values by using the command C<pgpk -l>.

LI1: profile
.The custom order profile which should be performed to check the order. If it fails, the route will not be performed. See C<OrderProfile> and C<mv_order_profile>.

LI1: receipt
.The receipt page that should be used for this routing. This only applies if supplant is set for the route.

LI1: report
.The report page that should be used for this routing. If C<attach> is defined, the contents of the report will be placed in a MIME attachment in the main order report.

LI1: reply
.The C<Reply-To> header that should be set. Default is the same as C<email>.
.If there are only word characters (A-Za-z0-9 and underscore), it describes an Interchange variable name where the address can be found.

LI1: supplant
.Whether this route should supplant the main order report. If set, the C<AsciiTrack> operation will use this route and the normal Interchange order e-mail sequence will not be performed.

LI1: track
.The name of a file which should be used for tracking. If the C<supplant> attribute is set, the normal order tracking will be used as well.

LI1: track_mode
.A number representing the mode to change either C<track> or C<individual_track> files.

An individual item routing causes all items labeled with that route to be placed in a special sub-cart that will be used for the order report. This means that the C<[item-list] LIST [/item-list]> will only contain those items, allowing operations to be performed on subsets of the complete order.

Here is an example of an order routing:

!block example
   Route  HARD  pgp_key          0x67798115
   Route  HARD  email            hardgoods@akopia.com
   Route  HARD  reply            service@akopia.com
   Route  HARD  encrypt          1
   Route  HARD  encrypt_program  "/usr/bin/pgpe -fat -q -r %s"
   Route  HARD  report           etc/report_mail

   Route  SOFT  email            ""
   Route  SOFT  profile          create_download_link
   Route  SOFT  empty            1

   Route  main  cybermode        mauthonly
   Route  main  CYBER_VERSION    3.2
   Route  main  CYBER_CONFIGFILE etc/cybercash.cfg
   Route  main  pgp_key          0x67798115
   Route  main  email            orders@akopia.com
   Route  main  reply            service@akopia.com
   Route  main  encrypt          1
   Route  main  encrypt_program  "/usr/bin/pgpe -fat -q -r %s"
   Route  main  report           etc/report_all
!endblock

To tell Interchange that order routing is in effect, the variable
C<mv_order_route> is set on the final order submission form:

!block example
   <INPUT TYPE="hidden" NAME="mv_order_route" VALUE="main">
!endblock

To set the order routing for individual items, some method of determining their status must be made and the C<mv_order_route> attribute must be set. This could be set at the time of the item being placed in the basket, or have a database field called C<goods_type> set to the appropriate value. The following example uses a Perl routine on the final order form:

!block example
[perl arg=carts interpolate=1]
   my $string = <<'EOF';
[item-list][item-code]  [item-field goods_type]
[/item-list]
EOF
   my @items;
   my %route;
   @items = grep /\S/, split /\n+/, $string;
   for(@items) {
       my ($code, $keycode) = split /\t/, $_;
       $route{$code} = $keycode;
   }
   my $cart = $Carts->{'main'};
   my $item;
   foreach $item ( @{ $Carts->{'main'} } ) {
       $item->{mv_order_route} = $route{$item->{'code'}} || undef;
   }
   return '';
[/perl]
!endblock

Now the individual items are labeled with a C<mv_order_route> value which causes their inclusion in the appropriate order routing.

Upon submission of the order form, any item labeled C<HARD> will be accumulated and sent to the e-mail address C<hardgoods@akopia.com>, where the item will be pulled from inventory and shipped.

Any item labeled C<SOFT> will be passed to the order profile C<create_download_link>, which will place it in a staging area for customer download. (This would be supported by a link on the receipt, possibly by reading a value set in the profile).

The C<main> order routing will use CyberCash to charge the order, and will be completely encrypted for e-mailing.

H1: Administering Interchange

Some utilities are supplied with Interchange and are located in the VendRoot/bin directory:

!block example
 compile_link Compiles an Interchange vlink or tlink CGI link
 dump         Dumps the session file for a particular catalog
 expire       Expires sessions for a particular catalog
 expireall    Expires all catalogs
 offline      Does offline build of the database(s)
 update       Does in-place update of the database(s)
 makecat      Make catalog
!endblock

Some example scripts for other functions are in the C<eg/> directory of the software distribution.

Some thought should be given to where the databases, error logs, and session files should be located, especially on an Internet Service Provider (ISP) that might have multiple users sharing an Interchange server. In particular, it is recommended that all of the session files and logs be put in a directory that is not writable by the user. If the directory or file is corrupted, the catalog may crash.

To test the format of user catalog configuration files before restarting the server, perform the following test (from VendRoot):

!block example
   bin/interchange -test
!endblock

This will check all configuration files for syntax errors, which might otherwise prevent a catalog from loading. Once a catalog configures properly, user reconfiguration will not crash it, but cause an error. It must be loaded when the server is started.

H2: Starting, Stopping, and Re-starting the Servers

The following commands need to have VENDROOT replaced with the main directory where Interchange is installed. If /usr/local/interchange is the site's Interchange base directory, the start command would be:

C</usr/local/interchange/bin/interchange>.

Do a C<perldoc VENDROOT/bin/interchange> for full documentation.

To start the server with default settings:

!block example
   VENDROOT/bin/interchange
!endblock

It is recommended to issue a restart, otherwise the server will not run anew if a server is already running.

!block example
   VENDROOT/bin/interchange -restart
!endblock

Assuming the server starts correctly, the names of catalogs as they are configured will be displayed, along with a message stating the process ID it is running under.

To re-start the server:

!block example
   VENDROOT/bin/interchange -restart
!endblock

C<-r> is the same as C<-restart>.

This is typically done to force Interchange to re-read its configuration. A message will be displayed stating that a C<TERM> signal has been sent to the process ID the server is running under. This information is also sent to /usr/local/interchange/error.log. Check the error.log file for confirmation that the server has restarted properly.

To stop the server:

!block example
   VENDROOT/bin/interchange -stop
!endblock

A message will be displayed stating that a C<TERM> signal has been sent to the process ID the server is running under. This information is also sent to /usr/local/interchange/error.log.

Because processes waiting for selection on some operating systems block signals, they may have to wait for HouseKeeping seconds to stop. The default is 60.

To terminate the Interchange server with prejudice, in case it will not stop, set:

!block example
   VENDROOT/bin/interchange -kill
!endblock

H2: UNIX and INET Modes

Both UNIX-domain and INET-domain sockets can be used for communication. INET domain sockets are useful when more than one Web server, connected via a local-area network (LAN), is used for accessing an Interchange server.

IMPORTANT NOTE: When sending sensitive information like credit card numbers over a network, always ensure that the data is secured by a firewall, or that the Interchange server runs on the same machine as any SSL-based server used for encryption.

If only running a site with one method of communication, use the C<->i and C<->u flags.

!block example
   # Start only in UNIX mode
   VENDROOT/bin/interchange -r -u

   # Start only in INET mode
   VENDROOT/bin/interchange -r -i
!endblock

H2: User Reconfiguration

The individual catalogs can be reconfigured by the user by running the C<[reconfig]> support tag. This should be protected by one of the several forms of Interchange authentication, preferably by HTTP basic authorization. See C<RemoteUser>.

Use reconfigure from the command line (as the Interchange user) with:

!block example
   VENDROOT/bin/interchange -reconfig <catalog>
!endblock

It is easy to manually reconfigure a catalog as an administrator. Interchange simply looks for a file C<etc/reconfig> (based in the Interchange software directory) at HouseKeeping time. If it finds a script name that matches one of the catalogs, it will reconfigure that catalog.

H2: Making the Product Database

The DBM product databases can be built off-line with the C<offline> command. The directory to be used for output is specified either on the command line with the C<-d> option, or is taken from the C<catalog.cfg> directive OfflineDir; C<offline> in the catalog directory by default. The directory must exist. The source ASCII files should be present in that directory, and the DBM files are created there. Existing files will be overwritten.

!block example
   offline -c catalog [-d offline_dir]
!endblock

Do a C<perldoc VENDROOT/bin/offline> for full documentation.

H2: Updating Individual Records

If a site has a very large DBM database that takes time to build, consider using the C<bin/update> script to change just one field in a record, or to add from a corrections list.

The following updates the products database C<price> field for item 19-202 with the new value 25.00

!block example
   update -c catalog -k 19-202 -f price 25.00
!endblock

More than one field can be updated on a single command line.

!block example
   update -c catalog -k 19-202 -f price -f comment 25.00 "That pitchfork couple"
!endblock

The following takes input from C<file>, which must be B<formatted exactly like the original database> and adds/corrects any records contained therein.

!block example
   update -c catalog -i file
!endblock

Invoke the command without any arguments for a usage message describing the options.

H2: Expiring Sessions

If a site has DBM capability and Interchange is using it to store the sessions, periodically expire old sessions to keep the session database file from growing too large.

!block example
   expire -c catalog
!endblock

There is also an C<expireall> script which reads all catalog entries in C<interchange.cfg> and runs C<expire> on them.

The C<expire> script accepts a C<-r> option which tells it to recover lost disk space.

On a UNIX server, add a crontab entry such as the following:

!block example
   # once a day at 4:40 am
   40 4 * * *    perl /usr/local/interchange/bin/expireall -r
!endblock

Interchange will wait until the current transaction is finished before expiring, so that this can be done at any time without disabling Web access. Any search paging files for the affected session (kept in C<ScratchDir>) will be removed as well.

If not running DBM sessions, a Perl script can be used to delete all files not modified in the last one or two days. The following will work if given an argument of the session directory or session files:

!block example
   #!perl
   # expire_sessions.pl -- delete files 2 days old or older

   my @files;
   my $dir;
   foreach $dir (@ARGV) {
       # just push files on the list
       if (-f $dir) { push @files, $_; next; }

       next unless -d $dir;

       # get all the file names in the directory
       opendir DIR, $dir or die "opendir $dir: $!\n";
       push @files, ( map { "$dir/$_" } grep(! /^\.\.?$/, readdir DIR) ) ;
   }

   for (@files) {
       unless (-f $_) {
           warn "skipping $_, not a file.\n";
           next;
       }
       next unless -M $_ >= 2;
       unlink $_ or die "unlink $_: $!\n";
   }
!endblock

It would be run with a command invocation like:

!block example
   perl expire_sessions.pl /usr/local/interchange/catalogs/construct/session
!endblock

Give it multiple directory names, if there is more than one catalog.

This script can be adjusted or refined as needed. Refinements might include reading the file to "eval" the session reference and expire only customers who are not members.

H2: Administrator Permissions

Select which operations each administrator can perform in the back office. Each section of the back office can be restricted with fine-grained control. An administrator can be given access to view the list of all orders, for instance, but not allowed to view details. Access to the rows of Interchange's internal tables can also be restricted on a per-table basis for each administrator.

H2: Administrators

The Access Manager allows an administrator to create user accounts or groups of users and restrict the use of certain features. This feature is especially useful if a company has employees that need the ability to check orders, but not change Web content. Note that, by default, users in the back office are stored and managed separately from customer login accounts. Users can have permissions granted on an individual basis, or by group. If a user is a "super-user," all other permissions settings will be ignored and the user will be allowed to do anything.

H2: Administrators: Edit Affiliates

Affiliates have the following attributes:

"Affiliate ID" is displayed in the order and traffic statistics along with the orders and traffic they produce.

"Affiliate Name" is the name of the affiliate.

"Campaigns" can be used to track traffic from advertising campaigns.

"Join_date" can be used to keep track of when the affiliate signed up.

"URL" is used, if present, to redirect visitors coming from this affiliate to a special home page just for visitors from that affiliate's site. This should not be the URL of the Affiliate's home site.

"Timeout delay" can be used to specify that orders attributed to this affiliate must happen within a certain amount of time from the time they were referred to the site by the affiliate. Measured in seconds.

H2: Direct Table Edit

Edit any of Interchange's internal tables. Select a table to edit, or search a table for selected rows to edit.

H2: Direct Table Edit: Select for Table Edit

Having selected a table to edit, a new row can be added, an existing row edited, all rows edited spreadsheet-style, or a row deleted.

H2: File Transfer

Transfer pages, templates, and configuration files to and from the Interchange installation. Select C<Pages> to transfer files that will be visible to site visitors. Select C<catalog.cfg> to edit the configuration file for the store. C<Upload> (send a file to the server), C<download> (send a file from the server to a computer), C<view>, or C<edit> available files.

H2: Import/Export

Interchange makes it easy to import and export data to and from a commerce Web site.

Use C<Database Upload> to import a tab delimited database of all product information to Interchange to make set-up faster and easier. C<Database Download> does just the opposite, allowing data to be downloaded from Interchange.

Use C<Layout Upload> to upload a site's layout information. Use C>Layout Download> to download a site's layout information.

H2: Logout

This feature will only be useful if there are multiple users in the Access Manager. When C<logout> is clicked, a user will be asked to log in again. If C<logout> is pressed in error, the user must log in again.

H2: Meta Field Information

Interchange can store meta information for selected columns of tables in a site's database. This meta information is used when the user interacts with the database. For example, the meta informaton for a C<Hide Item> field might specify that a checkbox be displayed when the user edits that field, since the only reasonable values are C<on> and C<off>. Or, the meta information might specify a filter on data entered for a C<Filename> field which makes sure that the characters entered are safe for use in a filename.

C<Widget type> specifies the C<HTML INPUT> tag type to use when displaying the field in, say, the item editor.

C<Width> and C<Height> only apply to some of the C<Widget type> options, for instance the C<Textarea> widget.

C<Label> is displayed instead of the internal column name. For example, the C<category> column of the C<products> table might have a label of C<Product Category>.

C<Help> is displayed below the column label, and helps describe the purpose of the field to the user.

C<Help url> can be used to link to a page giving more information on the field.

C<Lookup> can be used when a field is acting like a foreign key into another table. In that case, use some sort of select box as the widget type, and if referencing multiple rows in the destination table, use a multi select box, with C<colons_to_null> as the C<pre_filter>, and C<::> as the C<lookup_exclude>.

C<Filter> and C<pre_filter> can be used to filter data destined for that field or data read from that field, respectively.

H1: Interchange Security

H2: SSL Support

Interchange has several features that enable secure ordering via SSL (Secure Sockets Layer). Despite their mystique, SSL servers are actually quite easy to operate. The difference between the standard HTTP server and the SSL HTTPS server, from the standpoint of the user, is only in the encryption and the specification of the URL; C<https:> is used for the URL protocol specification instead of the usual http: designation.

Note[label='IMPORTANT NOTE: '] Interchange attempts to perform operations securely, but no guarantees or warranties of any kind are made! Since Interchange comes with Perl source, it is possible to modify the program to create security problems. One way to minimize this possibility is to record digital signatures, using MD5 or PGP, of C<interchange>, C<interchange.cfg>, and all modules included in Interchange. Check them on a regular basis to ensure they have not been changed.

Interchange uses the C<SecureURL> directive to set the base URL for secure transactions, and the C<VendURL> directive for normal non-secure transactions. Secure URLs can be enabled for forms through a form action of C<[process-target secure=1]>. An individual page can be displayed via SSL with C<[page href=mvstyle_pagename secure=1]>. A certain page can be set to be always secure with the C<AlwaysSecure> catalog.cfg directive.

Interchange incorporates additional security for credit card numbers. The field C<mv_credit_card_number> will not ever be written to disk.

To enable automated encryption of the credit card information, the directive C<CreditCardAuto> needs to be defined as C<Yes>. C<EncryptProgram> also needs to be defined with some value, one which will, hopefully, encrypt the number. PGP is now recommended above all other encryption program. The entries should look something like:

!block example
 CreditCardAuto   Yes
 EncryptProgram   /usr/bin/pgpe -fat -r sales@company.com
!endblock

See C<CreditCardAuto> for more information on how to set the form variables.

H2: Administrative Pages

With Interchange's C<GlobalSub> capability, very complex add-on schemes can be implemented with Perl subroutines. And with the new writable database, pages that modify the catalog data can be made. See C<MasterHost>, C<RemoteUser>, and C<Password>.

In addition, any Interchange page subdirectory can be protected from access by anyone except the administrator if a file called '.access' is present and non-zero in size.

H2: Controlling Access to Certain Pages

If the directory containing the page has a file C<.access> and that file's size is zero bytes, access can be gated in one of several ways.

^If the file C<.access_gate> is present, it will be read and scanned for page-based access. The file has the form:

!block example
  page: condition
  *: condition
!endblock

.The C<page> is the file name of the file to be controlled (the .html extension is optional). The C<condition> is either a literal C<Yes/No> or Interchange tags which would produce a C<Yes> or C<No> (1/0 work just fine, as do true/false).

.The entry for C<*> sets the default action if the page name is not found. If pages will be allowed by default, set it to C<1> or C<Yes>. If pages are to be denied by default in this directory, leave blank or set to C<No>. Here is an example, for the directory C<controlled>, having the following files:

!block example
 -rw-rw-r--   1 mike     mike            0 Jan  8 14:19 .access
 -rw-rw-r--   1 mike     mike          185 Jan  8 16:00 .access_gate
 -rw-rw-r--   1 mike     mike          121 Jan  8 14:59 any.html
 -rw-rw-r--   1 mike     mike          104 Jan  8 14:19 bar.html
 -rw-rw-r--   1 mike     mike          104 Jan  8 14:19 baz.html
 -rw-rw-r--   1 mike     mike          104 Jan  8 14:19 foo.html
!endblock

.The contents of C<.access_gate>:

!block example
   foo.html: [if session username eq 'flycat']
               Yes
             [/if]
   bar:      [if session username eq 'flycat']
             [or scratch allow_bar]
               Yes
             [/if]
   baz:      yes
   *:        [data session logged_in]
!endblock

.The page C<controlled/foo> is only allowed for the logged-in user B<flycat>.

.The page C<controlled/bar> is allowed for the logged-in user B<flycat>, or if the scratch variable C<allow_bar> is set to a non-blank, non-zero value.

.The page C<controlled/baz> is always allowed for display.

.The page C<controlled/any> (or any other page in the directory not named in C<.access_gate>) will be allowed for any user logged in via I<UserDB>. NOTE: The C<.access_gate> scheme is available for database access checking if the database is defined as an C<AdminDatabase>. The C<.access_gate> file is located in C<ProductDir>.

+If the Variable C<MV_USERDB_REMOTE_USER> is set (non-zero and non-blank), any user logged in via the UserDB feature will receive access to all pages in the directory. NOTE: If there is a C<.access_gate> file, it overrides this.

+If the variables C<MV_USERDB_ACL_TABLE> is set to a valid database identifier, the UserDB module can control access with simple ACL logic. See USER DATABASE. NOTE: If there is a C<.access_gate> file, it overrides this. Also, if C<MV_USERDB_REMOTE_USER> is set, this capability is not available.

H1: Usertag Reference

H2: email

!block example
   UserTag email Order to subject reply from extra
   UserTag email hasEndTag
   UserTag email Interpolate
   UserTag email Routine <<EOR
   sub {
       my($to, $subject, $reply, $from, $extra, $body) = @_;
       my($ok);

       $subject = '<no subject>' unless defined $subject && $subject;

       $reply = '' unless defined $reply;
       $reply = "Reply-to: $reply\n" if $reply;
       if (! $from) {
               $from = $Vend::Cfg->{MailOrderTo};
               $from =~ s/,.*//;
       }

       $extra =~ s/\s*$/\n/ if $extra;
       $ok = 0;
       SEND: {
           open(Vend::MAIL,"|$Vend::Cfg->{SendMailProgram} -t") or last SEND;
           print Vend::MAIL
                       "To: $to\n",
                       "From: $from\n",
                       $reply,
                       $extra || '',
                       "Subject: $subject\n\n",
                       $body
               or last SEND;
           close Vend::MAIL or last SEND;
           $ok = ($? == 0);
       }

       if (!$ok) {
           logError("Unable to send mail using $Vend::Cfg->{'SendMailProgram'}\n" .
               "To '$to'\n" .
               "From '$from'\n" .
               "With extra headers '$extra'\n" .
               "With reply-to '$reply'\n" .
               "With subject '$subject'\n" .
               "And body:\n$body");
       }
       $ok;
   }
   EOR
!endblock

H2: email_raw

!block example
   UserTag email_raw Documentation <<EOD

   This tag takes a raw email message, *including headers*, and
   users the SendmailProgram with -t option. Example:

   [email-raw]
   From: foo@bar.com
   To: bar@foo.com
   Subject: baz

   The text of the message.
   [/email-raw]

   The headers must be at the beginning of the line, and the header
   must have a valid To: or it will not be delivered.

   EOD

   UserTag email-raw hasEndTag
   UserTag email-raw Interpolate
   UserTag email-raw Routine <<EOR
   sub {
       my($body) = @_;
       my($ok);
       $body =~ s/^\s+//;

       SEND: {
           open(Vend::MAIL,"|$Vend::Cfg->{SendMailProgram} -t") or last SEND;
           print Vend::MAIL $body
               or last SEND;
           close Vend::MAIL
               or last SEND;
           $ok = ($? == 0);
       }

       if (!$ok) {
           ::logError("Unable to send mail using $Vend::Cfg->{SendMailProgram}\n" .
               "Message follows:\n\n$body");
       }
       $ok;
   }
   EOR
!endblock

H2: loc

!block example
   # [loc locale*] message [/loc]
   #
   # This tag is the equivalent of [L] ... [/L] localization, except
   # it works with contained tags
   #
   UserTag loc hasEndTag   1
   UserTag loc Interpolate 1
   UserTag loc Order locale
   UserTag loc Routine <<EOF
   sub {
       my ($locale, $message) = @_;
       return $message unless $Vend::Cfg->{Locale};
       my $ref;
       if($locale) {
           return $message
               unless defined $Vend::Cfg->{Locale_repository}{$locale};
           $ref = $Vend::Cfg->{Locale_repository}{$locale}
       }
       else {
           $ref = $Vend::Cfg->{Locale};
       }
       return defined $ref->{$message} ? $ref->{$message} : $message;
   }
   EOF
!endblock

H1:Back Office UI

H2:[display] tag and mv_metadata

The Interchange back office UI uses the mv_metadata table to discover formatting information for field, table, and view display. The information is kept in fields in the mv_metadata table, and is used to select the display, the HTML input type, the size (height and width where appropriate), label, help text, additional help URL, and default value display.

It works in conjunction with the [display ...] usertag defined in the Interchange UI as well as in specific pages in the UI. The [display] tag has this syntax:

N:[display table=tablename column=fieldname key=key arbitrary=tag filter=op ...]

In the simplest use, the formatting information for a table form field is called with:

.[display table=products column=category key="os28007"]

The mv_metadata table is scanned for the following keys:

.products::category::os28007
.products::category

If a row is found with one of those keys, then the information in the row is used to set the display widget. If no row is found, an INPUT TYPE=TEXT widget is displayed. If the data is all digits, a size of 8 is used, otherwise the size is 60.

If the following row were found (not all fields shown, would be tab-separated in the actual data):

!block example
  code                type   width height label     options
  products::category  text   20           Category
!endblock

Then an input C<<>C<INPUT TYPE=text SIZE=20 VALUE="*category*">> with a field label of I<Category> would be output.

If the following row were found:

!block example
  code                type   width height label     options
  products::category  select              Category  =none, product=Hardware
!endblock

Then the following would be output:

!block example
	<SELECT NAME=category>
	<OPTION VALUE="">none
	<OPTION VALUE="product">Hardware
	</SELECT>
!endblock

The standard widget types are:

LI1:text

.The default. Uses the fields:

!block example
    width   size of input box
!endblock

LI1:textarea

.Format a <TEXTAREA> </TEXTAREA> pair. Uses the fields:

!block example
	width   COLS for textarea
	height  ROWS for textarea
!endblock

LI1:select

.Format a <SELECT> </SELECT> pair with appropriate options. Uses the fields:

!block example
  height          SIZE for select
  default         Default for SELECTED
  options         Options for a fixed list (or prepended to a lookup)
  lookup          signals a lookup (used as field name if "field" empty)
  field           field to look up possible values in
  db              table to look up in if not current table
  lookup_exclude  regular expression to exclude certain values from lookup
!endblock


H1:Standard Database Dictionary

You can alter any of the standard databases to suit your needs, add new databases, or remove unneeded ones. But the following dictionary lists each table and each of its fields, and explains its purpose.


H2:2ndDayAir.csv

Shipping table


H2:450.csv

Shipping table


H2:Ground.csv

Shipping table


H2:NextDayAir.csv

Shipping table


H2:access.asc

Admin access table

!block example
    username
    password
    name
    last_login
    super
    yes_tables
    no_tables
    upload
    acl
    export
    edit
    pages
    files
    config
    reconfig
    groups
    meta

    no_functions
        Used From: none

    yes_functions
        Used From: dist/lib/UI/pages/admin/access_permissions.html

    table_control
        Used From: dist/lib/UI/Primitive.pm
                   dist/lib/UI/pages/admin/special/key_violation.html
                   dist/lib/UI/usertag/if_mm

    personal_css
        Used From: dist/lib/UI/pages/admin/preferences.html
        Used in the admin screens to make personal changes to the admin
        presentation, by creating your own personal CSS, appears to be used
        currently only in the preferences screen.
!endblock


H2:affiliate.txt

!block example
    affiliate
    name
        Affiliate Name
    campaigns
    coupon_amount
    join_date
        Join date
    url
        URL (Default URL to redirect to)
    timeout
        Timeout delay (in seconds, 0 to disable)
    active
    password
    image
!endblock


H2:area.txt

!block example
    code
    sel
    name
    which_page
    sort
    display_type
    image
    image_prop
    banner_image
    banner_text
    link_type
            none = No link
            external = External link (http://...)
            internal = Interchange page
            simple = Simple search
            complex = Complex search
    url
    tab
    page
    search
    selector
    link_template
!endblock


H2:banner.txt

!block example
    code
    category
    weight
    rotate
    banner
!endblock

H2:cat.txt

!block example
    code
    sel
    name
    which_page
    sort
    display_type
            name = Name
            url = URL only
            icon = Icon and name
            image = Image
    image
    image_prop
    banner_image
    banner_text
    link_type
        Type of link:
            none = No link
            external = External link (http://...)
            internal = Interchange page
            simple = Simple search
            complex = Complex search
    url
    tab
    page
    search
    selector
    link_template
!endblock


H2:component.txt

!block example
    code
    group
    name
    width
    height
    pieces
    label
    banner
    help
    help_url
    filter
    controls
    Variable
!endblock


H2:country.txt

!block example
    code
    sorder
    region
    selector
    shipmodes
    name
!endblock


H2:downloadable.txt

!block example
    sku
    dl_location
    dl_type
!endblock


H2:files.txt


H2:gift_certs.txt

!block example
    code
    username
    order_date
    original_amount
    redeemed_amount
    available_amount
    passcode
    active
    redeemed
    update_date
!endblock


H2:icmenu.txt

!block example
    code
    mgroup
    msort
    next_line
    indicator
    exclude_on
    depends_on
    page
    form
    name
    super
    inactive
    special
    help_name
!endblock


H2:inventory.txt

!block example
    sku
        Quantity info
    quantity
    stock_message
        Out of stock message:
            In stock
            Ships in 3-5 days
            Ships in 4-6 weeks
            Special order
    account
        Accounting info
        Sales account
    cogs_account
!endblock


H2:locale.txt

!block example
    code
    en_US
    de_DE
    fr_FR
!endblock


H2:merchandising.txt

!block example
    sku
    featured
    banner_text
    banner_image
    blurb_begin
    blurb_end
        Closer (end text for feature display)
    timed_promotion
    start_date
        Start date
    finish_date
    upsell_to
        Cross-sell SKUs
    cross_sell
    cross_category
    others_bought
    times_ordered
!endblock


H2:mv_metadata.asc

!block example
    code
        Table::Column to be operated on.
        Database table
    type
        Widget type (Select the basic display type for the field)
            textarea = Textarea
            text = Text Entry (default)
            select = Select Box
            yesno = Yes/No (Yes=1)
            noyes = No/Yes (No=1)
            multiple = Multiple Select
            combo = Combo Select
            reverse_combo = Reverse Combo
            move_combo = Combo move
            display = Text of option
            hidden_text = Hidden(show text)
            radio = Radio box
            radio_nbsp = Radio (nbsp)
            checkbox = Checkbox
            check_nbsp = Checkbox (nbsp)
            imagedir = Image listing
            imagehelper = Image upload
            date = Date selector
            value = Value
            option_format = Option formatter
            show = Show all options
    width
        Width (SIZE for TEXT, COLS for TEXTAREA, Label limit for SELECT)
    height
        Height (SIZE for SELECT, ROWS for TEXTAREA)
    field
        Field for lookup (can be two comma separated fields, in which case
        second is used as the label text.  Both must be in the same table.)
    db
    name
        Variable name (normally left empty, changes variable name to send in
        form)
    outboard
        Select directory for image listing widget
    options
        options in the format <blockquote>value=label*</blockquote>
    attribute
        Column name (Do not set this.)
    label
    help
        Help (displays at top of page)
    lookup
        Lookup select (Whether lookup is performed to get options for a select
        type.  If nothing is in the field, then used as the name of the field
        to lookup in.  Use lookup table if you want to look up in a different
        table.
    filter
        Filters (Filters which can transform or constrain your data.  Some
        widgets require filters.)
    help_url
        Help URL (links below help text)
        A URL which will provide more help
    pre_filter
    lookup_exclude
        ADVANCED: regular expression that excludes certain keys from the lookup
    prepend
    append
        Append HTML (HTML to be appended to the widget.  Will substitute in the
        macros _UI_TABLE_, _UI_COLUMN_, _UI_KEY_, and _UI_VALUE_, and will
        resolve relative links with absolute links.)
    display_filter
!endblock


H2:options.txt

!block example
    code
    o_master
        Master item (Always included when the base SKU is equal to this.)
    sku
        Unique SKU (Associated item)
    o_group
        Option Group (scanned to see if it applies (or doesn't apply) to this
        product)
    o_sort
    phantom
        Phantom? (Whether a phantom for structuring)
    o_enable
        Follow? (Enable for next level) Sub-items
    o_matrix
        Matrix options (Matrix options allow you to maintain multiple option
        sets with inventory on each combination)
    o_modular
        Modular Options (Modular options allow you to attach multiple SKUs to
        the same item, possibly with attached options of their own.  Very
        complex but you can do most anything.
    o_default
        Default? (Yes if the default selection for the group)
    o_label
        Short name for option display
    o_value
        Possible Values (In Interchange option format: VALUE1=Label 1,
        VALUE2=Label 2 *=default selection)
    o_widget
    o_footer
    o_header
    o_height
        Height of widget (if applicable)
    o_width
        Width of widget
    description
        Option/Variant description (for description in display)
    price
        Price (Price of this option/variant)
    wholesale
        Dealer price
    differential
    weight
    volume
        Volume (if different, mostly for matrix/modular)
    mv_shipmode
    o_exclude
        Exclude (Only for modular options. Lists the option groups to exclude
        once the include has been done.  Takes the form of a number of wildcard
        atoms.
    o_include
        Include (Only for modular options. Lists the option groups to include
        with your item. Takes the form of a number of wildcard atoms.)
!endblock


H2:order_returns.txt

!block example
    code
    order_number
    session
    username
    rma_number
    nitems
    total
    return_date
    update_date
!endblock


H2:orderline.txt

!block example
    code
    store_id
    order_number
    session
    username
    shipmode
    sku
    quantity
    price
    subtotal
    shipping
    taxable
    mv_mi
    mv_si
    size
    color
    options
    order_date
    update_date
    status
            pending = Pending
            shipped = Shipped
            backorder = Back ordered
            credit = Waiting for credit check
            canceled = Cancelled
    parent
    affiliate
    campaign
    description
    mv_mp
!endblock


H2:pricing.txt

!block example
    sku
    price_group
    q2
    q5
    q10
    q25
    q100
!endblock


H2:products.txt

!block example
    sku
    description
        Short Description
    title
        Title
    template_page
    comment
        Detailed Description
    thumb
        Thumb
    image
        Image
    price
    wholesale
        Dealer Price
    prod_group
    category
        Category (Enter in box for new category.)
    nontaxable
    weight
        Weight in pounds
    size
    color
    gift_cert
        Gift certificate handling? (Yes if price should appear to be quantity)
    related
    featured
    download
    dl_type
    dl_location
    inactive
    url
!endblock


H2:route.txt

!block example
    code
    attach
    continue
    commit
    commit_tables
    counter
    credit_card
    cyber_mode
    email
    empty
    encrypt
    encrypt_program
    errors_to
    increment
    inline_profile
    individual_track
    individual_track_ext
    partial
    pgp_cc_key
    pgp_key
    profile
    receipt
    reply
    report
    rollback
    rollback_tables
    supplant
    track
!endblock


H2:salestax.asc


H2:shipping.asc

Shipping methods table


H2:state.txt

State/territory/county information

!block example
    code
    sorder
    country
    state
    name
    tax
    postcode
    shipmodes
    tax_name
!endblock


H2:transactions.txt

Order table, one entry per order, assoc with orderline

!block example
    code
    store_id
    order_number
    session
    username
    shipmode
    nitems
    subtotal
    shipping
    handling
    salestax
    total_cost
    fname
    lname
        Last Name
    company
    address1
    address2
        Address line 2
    city
    state
    zip
    country
    phone_day
        Daytime Phone
    phone_night
        Home Phone
    fax
    email
    b_fname
    b_lname
        Billing Last Name
    b_company
    b_address1
    b_address2
        Billing Address Line 2
    b_city
    b_state
        Billing State
    b_zip
        Billing Postcode
    b_country
        Billing Country
    b_phone
    order_date
    order_ymd
    order_wday
    payment_method
    po_number
    avs
    order_id
    update_date
    status
    affiliate
    campaign
    parent
    archived
    deleted
    complete
    comments
!endblock


H2:userdb.txt

Customer database

!block example
    username
    password
    acl
    mod_time
    s_nickname
    company
    fname
    lname
    address1
    address2
    address3
    city
    state
    zip
        Postcode
    country
        Country
    phone_day
    mv_shipmode
    b_nickname
    b_fname
    b_lname
    b_address1
    b_address2
    b_address3
    b_city
    b_state
    b_zip
    b_country
    b_phone
        Billing Phone
    mv_credit_card_type
    mv_credit_card_exp_month
    mv_credit_card_exp_year
    p_nickname
    email
    fax
    phone_night
    fax_order
        Payment method:
            (none) = Credit Card
            1 = Fax or Mail
            2 = Purchase order
            3 = COD
    address_book
    accounts
    preferences
    carts
    owner
    file_acl
    db_acl
    order_numbers
    email_copy
    mail_list
        Mailing lists the customer has joined:
            offer = Special offers
            newsletter = Newsletter
            alert = Alerts and Recalls
            upgrade = Upgrades
    project_id
    account_id
    order_dest
    credit_limit
    inactive
    dealer
        Dealer:
            (none) = No
            1 = Yes
    b_company
    feedback 
        ???
!endblock


H2:variable.txt

Configuration database

!block example
    code
        Variable name
    Variable
    pref_group
        Preferences area
!endblock


