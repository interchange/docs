----------------------------------------
Upgrading from MiniVend 4 to Interchange
----------------------------------------

The UI should work fine for editing database tables. Obviously the
things which are specific to the order transaction setup will break
unless you have the right fields, but even these can be controlled
by configuring the UI.
 
transaction.txt needs an extra field 'archived'

if [item-price] suddenly turns 0, check PriceField in the catalog.cfg



From mikeh@minivend.com Wed Jan 17 20:38:35 2001
Date: Thu, 13 Jul 2000 11:49:56 -0400
From: Mike Heins <mikeh@minivend.com>
Reply-To: minivend-users@minivend.com
To: minivend-users@minivend.com
Subject: Re: [mv] Upgrade to Preview of Akopia Interchange

******    message to minivend-users from Mike Heins <mikeh@minivend.com>     ******

Quoting Lee Hoffman (lee@rsub.net):
> 
> Does anyone know how to upgrade minivend 4 to Interchange?? The docs and
> press releases say the upgrade will be easy but there is no mention of how.

We will be providing an update document when we do the official release.
We expect that to happen next month some time.

Here is a bit of a start on that:

MINIVEND.CFG:

	Remove references to MiniMate.

	Add this line to minivend.cfg:

	#include lib/UI/ui.cfg

	Make sure the files catalog_before.cfg and catalog_after.cfg
	are there, or add their contents to etc/your_cat_name.before
	and  etc/your_cat_name.after to it only for some catalogs.

ACCESS MANAGER:

    You need to get the minimate.asc file renamed to access.asc and
    add the following fields to the first line:
	    
	    groups
	    last_login
	    name
	    password

	Remove these catalog.cfg lines:

		Variable            MINIMATE_META   mv_metadata
		Variable            MINIMATE_TABLE  minimate
		Database            minimate        minimate.asc      TAB

	Add this one:
		Database            affiliate    affiliate.txt     TAB

    Authentication for admin users is now done from a separate 
    table than customers, and passwords are encrypted.

DATABASE EDITORS:

	Update the mv_metadata.asc file as appropriate.

ORDER MANAGER:

    Some things that are needed for the order manager:

    --- Add these fields to transactions:
		    affiliate approx. char(32)
		    archived  char(1)
		    campaign  approx. char(32)
		    comments  blob/text
		    complete  char(1)
		    deleted   char(1)
		    order_wday char(10)
		    order_ymd char(8)
		    po_number approx. char(32)

    --- Add these fields to transactions:
		    affiliate approx. char(32)
		    campaign  approx. char(32)

    --  Remove this field from userdb:
		    mv_credit_card_info
    --  Add these fields to userdb:
		    inactive  char(1)
		    credit_limit char(14) or decimal(12,2)

    --- Create the directory 'logs'.
    --- Create the directory 'orders' if it doesn't already exist.
    --- Update your order routes to those in the Interchange distribution.
		Note that the route log_entry is necessary if you want to enter
		orders from the Interchange UI.
    --- Update the etc/log_transaction file.
    --- Add the etc/log_entry file.
	--- Add this to catalog.cfg:

			## Don't want people setting their credit_limit directly
			UserDB default scratch credit_limit

AFFILIATES:

	Add an affiliate table:

	affiliate	name	campaigns	join_date	url	timeout	active	password

PAGE EDITOR:

	--- Add the directories 'templates' and 'backup'. Copy the contents
		of the interchange simple/templates to templates.

ITEM EDITOR:

	-- If you want the merchandising feature, add the fields blurb_begin
	   and blurb end; char(128) or whatever will hold your promo data works.

KNAR EDITOR:

	Create the file variable.txt with these fields:

		code	Variable

	Add this as the *first* line of catalog.cfg:

		VariableDatabase variable

ROUTE EDITOR:

	Create the file route.txt with these fields:

		code
		report
		receipt
		encrypt_program
		encrypt
		pgp_key
		pgp_cc_key
		cyber_mode
		credit_card
		profile
		inline_profile
		email
		attach
		counter
		increment
		continue
		partial
		supplant
		track
		errors_to

	Add this line in catalog.cfg:

		RouteDatabase route

Basically, if you are starting from Minivend 4 you should just be able
to install it. Your catalog should continue to work just fine, and the
admin interface will be somewhat usable. I haven't actually tried this
yet, but I will be doing so soon. 8-)

-- 
Akopia, Inc., 131 Willow Lane, Floor 2, Oxford, OH  45056
phone +1.513.523.8220 fax 7501 <heins@akopia.com>




----------------------------------------
Upgrading from Minivend 3 to Interchange
----------------------------------------

There were big changes from Minivend 3 to Minivend 4, some of which were
incompatible. 

Many things were removed as redundant, deprecated, or just plain 
crufty:


* All frame features removed, frames are managed by the user in HTML.


* Tags removed:

buttonbar       Replace with Variable.
random          Replace with [ad random=1] or custom code
rotate          Replace with [ad ...]
help            No replacement, use data functions or variables.
body            Replace with templates
finish_order    No replacement, use [if items]Message[/if]
last_page       No replacement, never worked
item-link       No replacement, just use [page [item-code]]
loop-link       No replacement, just use [page [loop-code]]
sql-link        No replacement, just use [page [sql-code]]
accessories     Replace with normal data functions


* Compatibility routines for many popular tags like [random], [rotate], etc.
are provided in the compat/ directory. To use, include the files in minivend.cfg:

    #include compat/*


* Directives removed:

    ActionMap
    AdminDatabase
    AdminPage
    AsciiBackend
    BackendOrder
    ButtonBars
    CheckoutFrame
    CheckoutPage
    CollectData
    DataDir
    Delimiter
    DescriptionTrim
    FieldDelimiter
    FrameFlyPage
    FrameLinkDir
    FrameOrderPage
    FrameSearchPage
    ItemLinkDir
    ItemLinkValue
    MsqlDB
    MsqlProducts
    Mv_AlinkColor
    Mv_Background
    Mv_BgColor
    Mv_LinkColor
    Mv_TextColor
    Mv_VlinkColor
    NewReport
    NewTags
    OldShipping
    OrderFrame
    PageCache
    PriceDatabase
    Random
    ReceiptPage
    RecordDelimiter
    ReportIgnore
    Rotate
    SearchFrame
    SearchOverMsg
    SecureOrderMsg
    SpecialFile
    SubArgs
    Tracking


* Minor operations removed:

    - auto-substitution of mp= on [loop search=profile],
      [search-region arg=profile]
    - [tag scan]...
    - [tag sql]...

Many of these are related to one of:

    * Removal of frames logic
    * Removed tags
    * Obsolete methods
    * Old routines for 2.0x compatibility


* Search lists:

Must now be surrounded by [search-region] [/search-region].

REASON: Multiple searches can be done in a page, with multiple [more-list]
entries, multiple [no-match] areas, etc. It was not really possible to
avoid this and add the feature.

This is the first thing you should do. To find all files containing the
search list, do:

	find pages -type f | xargs grep -l '\[search.list'

That will yield a set of files that need to be updated. You should surround
all parts of the search area, i.e.:

	[search-region]

	[search-list]
		your search iteration stuff, [item-code], etc.
	[/search-list]

	[more-list]
		[more]
	[/more-list]

	[/search-region]

* Search conditionals should now say [if-item-field field] [/if-item-field]
and [if-item-data table column] [/if-item-data].

REASON: Allows mixing and nesting of lists.

You may find that the old works in some situations, but it will not work
in all situations.

* Form Data updates:

Added Scratch variable mv_data_enable to gate the update_data 
function. You must set it before doing a form update.

REASON: Prior to this it was possible to update a SQL database willy-nilly. 

This will work in the short term:

	[set update_database]
	[set mv_data_enable]1[/set]
	[/set]
	<INPUT TYPE=hidden NAME=mv_click VALUE=update_database>

It will ensure at least that the user loads one form from you for each
update. For best security, gate with a UserDB entry.




mv4 uses in-page error-flagging on the checkout page.  Simplest way
to convert is probably to use the checkout.html from the simple
demo as a start, and move in any customization from the existing
site's catalog.html (headers, footers, logos, etc.)  A line-by-line
comparison of the data fields in the checkout page should be performed,
adding any custom fields as needed.  Custom error checking in 
etc/order.profiles may have to be re-worked, or can be added into 
checkout.html using the in-page order profile capability.

Remember to update receipt.html and report/report.html with any 
custom fields, as well.


* Tags removed:

buttonbar       Replace with Variable defined in catalog.cfg.
                buttonbar was previously used as an SSI-like
                command for catalog-wide standardized features
                like navigation bars. In the 3.x catalog.cfg the
                ButtonBars parameter defines a list of html
                snippets, like
                  'ButtonBars header.html footer.html copyright.html'
                so [buttonbar 0] substitutes 'header.html',
                   [buttonbar 1] substitutes 'footer.html', etc.

                In 4.x catalog.cfg, define variables, like
                   Variable HEADER    <pages/header
                   Variable FOOTER    <pages/footer
                   Variable COPYRIGHT <pages/copyright
                   etc.
 
                Then replace all occurences of [buttonbar 0]
                with __HEADER__, [buttonbar 1] with __FOOTER__, etc

                Note that the old header.html, footer.html, etc.
                contained html code, but were not actually html
                pages with <html><body> etc, tags.  Thus the current
                practice is to use filenames with no extension or
                perhaps '.txt' to differentiate them from pages.

random          Replace with [ad random=1] or custom code
                
                See the [ad] tag docs.  Random and rotate were used
                to place random or rotating regions on pages, such
                as banner ads.

                The Random durective in catalog.cfg defines the
                numbered html snippet files, similar to buttonbars
                above.

rotate          Replace with [ad ...]

                See random above

help            No replacement
body            Replace with templates

                Again the body tag [body 1] etc. defines
                numbered body definitions that could be applied 
                site-wide.  However, in this case minivend actually
                built up the <body ....> substitution using the
                Mv_* directives in catalog.cfg.  

finish_order    No replacement
                finish_order was a conditional tag; if the basket contained
                anything a 'checkout' graphic would be displayed.  This
                can be emulated with a test of [nitems]
last_page       No replacement - this can be emulated by setting a scratch
                variable on one page, then using it to build the return URL
item-link       No replacement, just use [page [item-code]]
loop-link       No replacement, just use [page [loop-code]]
sql-link        No replacement, just use [page [sql-code]]
accessories     Replace with normal data functions


Form Data updates:

    * Added Scratch variable mv_data_enable to gate the update_data 
      function; prior to this it was possible to update a database
      willy-nilly. Do:

            [set update_database]
            [if type=data term="userdb::trusted::[data session username]"]
                [set mv_data_enable]1[/set]
            [else]
                [set mv_data_enable]0[/set]
            [/else]
            [/if]
            [/set]


The least-compatible things in the tag area are [if-field] (needs to be
[if-PREFIX-field], where prefix might be item|loop by default depending
on the tag. Likewise:
 
        [if-data table col]  --> [if-PREFIX-data table col]
        [on-change mark]     --> [PREFIX-change mark]
        [if-param param]     --> [if-PREFIX-param param]
        [PREFIX-param N]     --> [PREFIX-pos N] (where N is a digit)
 
Also, you must always surround [search-list] with [search-region]
[/search-region].
 
Embedded Perl changes quite a bit. While there are the $Safe{values} and
other variable settings, they are automatically shared (no arg="values")
and move to:
 
        $Safe{values}   --->  $Values
        $Safe{cgi}      --->  $CGI
        $Safe{carts}    --->  $Carts
        $Safe{items}    --->  $Items
        $Safe{config}   --->  $Config
        $Safe{scratch}  --->  $Scratch
 
There are a number of other objects, see the docs.
 
Most other issues have more to do with the catalogs skeleton (i.e. simple
or barry or basic or art) than they do the core. For instance, the
"basic" catalog produced for MV3 ran unchanged except for the issues
discussed above.
