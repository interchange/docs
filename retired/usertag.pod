=head1 Interchange UserTag Library

MML stands for Minivend Markup Language. Minivend was the predecessor
to Interchange.

There are dozens of MML pre-defined tag functions. If you don't see
just what you need, you can use C<USER DEFINED TAGS> to create tags just as
powerful as the pre-defined ones. 

This document presents some of those user-defined tags.


=head1 bar_button

    UserTag bar-button Order page current
    UserTag bar-button PosNumber 2
    UserTag bar-button HasEndTag 1
    UserTag bar-button Routine   <<EOR
    sub {
    	use strict;
    	my ($page, $current, $html) = @_;
    	$current = $Global::Variable->{MV_PAGE}
    		if ! $current;
    	$html =~ s:\[selected\]([\000-\377]*)\[/selected]::i;
    	my $alt = $1;
    	return $html if $page ne $current;
    	return $alt;
    }
    EOR
    

=head1 convert_date

    UserTag convert-date Order days raw
    UserTag convert-date PosNumber 2
    UserTag convert-date HasEndTag
    UserTag convert-date Interpolate
    UserTag convert-date Routine <<EOR
    sub {
        my ($days, $raw, $text) = @_;
        my @t;
    
            my $fmt = '%d-%b-%Y';
            if($text =~ /\d/) {
                            $text =~ s/\D//g;
                            $text =~ /(\d\d\d\d)(\d\d)(\d\d)(?:(\d\d)(\d\d))?/;
                            $t[2] = $4 || undef;
                            $t[1] = $5 || undef;
                            $t[3] = $3;
                            $t[4] = $2 - 1;
                            $t[5] = $1;
                            $t[5] -= 1900;
            }
            else {
                            my $now = time();
                            if ($days) {
                                            $now += $days * 86400;
                            }
                            @t = localtime($now);
            }
    
            if (defined $raw and Vend::Util::is_yes($raw)) {
                            $fmt = $t[2] && $text ?  '%Y%m%d%H%M' : '%Y%m%d';
            }
            elsif ($t[2]) {
                            $fmt = '%d-%b-%Y %I:%M%p';
            }
    
        return POSIX::strftime($fmt, @t);
    }
    EOR

=head1 db_date

    # [db-date table format]
    #
    # This tag returns the last-modified time of a database table,
    # 'products' by default. Accepts a POSIX strftime value for
    # date format; uses '%A %d %b %Y' by default.
    #
    UserTag  db-date  Order table format
    UserTag  db-date  PosNumber 2
    UserTag  db-date  Routine <<EOF
    sub {
        my ($db, $format) = @_;
    	my ($dbfile, $mtime);
    
    	# use defaults if necessary
    	$db = 'products' unless $db;
        $format = '%A %d %b %Y' unless $format;
    
    	# build database file name
    	$dbfile = $Vend::Cfg->{ProductDir} . '/' 
    		. $Vend::Cfg->{Database}{$db}{'file'};
    
    	# get last modified time
    	$mtime = (stat ($dbfile))[9];
    
    	if (defined ($mtime)) {
    		return POSIX::strftime($format, localtime($mtime));
    	} else {
    		logError ("Couldn't stat $dbfile: $!\n");
    	}
    }
    EOF
    

=head1 email

    UserTag email Order to subject reply from extra
    UserTag email hasEndTag
    UserTag email Interpolate
    UserTag email Routine <<EOR
    sub {
        my($to, $subject, $reply, $from, $extra, $body) = @_;
        my($ok);
    
        $subject = '<no subject>' unless defined $subject && $subject;
    
        $reply = '' unless defined $reply;
        $reply = "Reply-to: $reply\n" if $reply;
    	if (! $from) {
    		$from = $Vend::Cfg->{MailOrderTo};
    		$from =~ s/,.*//;
    	}
    
    	$extra =~ s/\s*$/\n/ if $extra;
        $ok = 0;
        SEND: {
            open(Vend::MAIL,"|$Vend::Cfg->{SendMailProgram} -t") or last SEND;
            print Vend::MAIL
    			"To: $to\n",
    			"From: $from\n",
    			$reply,
    			$extra || '',
    			"Subject: $subject\n\n",
    			$body
                or last SEND;
            close Vend::MAIL or last SEND;
            $ok = ($? == 0);
        }
    
        if (!$ok) {
            logError("Unable to send mail using $Vend::Cfg->{'SendMailProgram'}\n" .
                "To '$to'\n" .
                "From '$from'\n" .
                "With extra headers '$extra'\n" .
                "With reply-to '$reply'\n" .
                "With subject '$subject'\n" .
                "And body:\n$body");
        }
        $ok;
    }
    EOR

=head1 email_raw

    UserTag email_raw Documentation <<EOD
    
    This tag takes a raw email message, *including headers*, and
    users the SendmailProgram with -t option. Example:
    
    [email-raw]
    From: foo@bar.com
    To: bar@foo.com
    Subject: baz
    
    The text of the message.
    [/email-raw]
    
    The headers must be at the beginning of the line, and the header
    must have a valid To: or it will not be delivered.
    
    EOD
    
    UserTag email-raw hasEndTag
    UserTag email-raw Interpolate
    UserTag email-raw Routine <<EOR
    sub {
        my($body) = @_;
        my($ok);
        $body =~ s/^\s+//;
    
        SEND: {
            open(Vend::MAIL,"|$Vend::Cfg->{SendMailProgram} -t") or last SEND;
            print Vend::MAIL $body 
                or last SEND;
            close Vend::MAIL
                or last SEND;
            $ok = ($? == 0);
        }
    
        if (!$ok) {
            ::logError("Unable to send mail using $Vend::Cfg->{SendMailProgram}\n" .
                "Message follows:\n\n$body");
        }
        $ok;
    }
    EOR

=head1 fcounter

    UserTag fcounter Order file
    UserTag fcounter Routine <<EOF
    sub {
        my $file = shift || 'etc/counter';
        $file = $Vend::Cfg->{VendRoot} . "/$file"
            unless index($file, '/') == 0;
        my $ctr = new File::CounterFile $file;
        return $ctr->inc();
    }
    EOF

=head1 loc

    # [loc locale*] message [/loc]
    #
    # This tag is the equivalent of [L] ... [/L] localization, except
    # it works with contained tags
    #
    UserTag loc hasEndTag   1
    UserTag loc Interpolate 1
    UserTag loc Order locale
    UserTag loc Routine <<EOF
    sub {
        my ($locale, $message) = @_;
        return $message unless $Vend::Cfg->{Locale};
        my $ref;
        if($locale) {
            return $message
                unless defined $Vend::Cfg->{Locale_repository}{$locale};
            $ref = $Vend::Cfg->{Locale_repository}{$locale}
        }
        else {
            $ref = $Vend::Cfg->{Locale};
        }
        return defined $ref->{$message} ? $ref->{$message} : $message;
    }
    EOF
    

=head1 rand

    UserTag rand Order file
    UserTag rand posNumber 1
    UserTag rand addAttr
    UserTag rand hasEndTag
    UserTag rand Routine <<EOR
    sub {
    	my ($file, $opt, $inline) = @_;
    	my $sep = $opt->{separator} || '\[alt\]';
    	$inline = ::readfile($file)
    		if $file;
    	my @pieces = split /$sep/, $inline;
    	return $pieces[int(rand(scalar @pieces))] ;
    }
    EOR

=head1 reconfig

    UserTag reconfig Order name
    UserTag reconfig PosNumber  1
    UserTag reconfig Routine <<EOR
    use strict;
    sub {
    	my $name = shift || $Vend::Cfg->{CatalogName};
    
    	my $myname = $Vend::Cfg->{CatalogName};
    #::logGlobal("Trying to reconfig $name");
    
    	if($myname ne '_mv_admin' and $myname ne $name) {
    			$::Values{mv_error_tag_restart} =
    				"Not authorized to reconfig that catalog.";
    			return undef;
    	}
    #::logGlobal("Passed name check on reconfig $name");
    
    	logData("$Global::ConfDir/reconfig", $Global::Catalog{$name}->{'script'});
    	return 1;
    }
    EOR
    

=head1 reconfig_time

    UserTag reconfig-time Order name
    UserTag reconfig-time Routine <<EOR
    sub {
    	my $name = shift || $Vend::Cfg->{CatalogName};
    	my $myname = $Vend::Cfg->{CatalogName};
    	return '' unless $myname eq '_mv_admin' or $myname eq $name;
    	return Vend::Util::readfile($Global::ConfDir . '/status.' . $name);
    }
    EOR
    
    

=head1 reconfig_wait

    UserTag reconfig-wait Order name
    UserTag reconfig-wait Routine <<EOR
    sub {
    	my $name = shift || $Vend::Cfg->{CatalogName};
    	my $myname = $Vend::Cfg->{CatalogName};
    	return '' unless $myname eq '_mv_admin' or $myname eq $name;
        my $now = time();
        my $mod = ( stat("$Global::ConfDir/status." . $Vend::Cfg->{CatalogName}))[9];
        if( ($now - $mod) < $Global::HouseKeeping ) {
            $::Scratch->{possible_timeout} = 0;
            $::Scratch->{reconfigured} = 1;
            return '';
        }
        else {
            sleep 1;
            $::Scratch->{possible_timeout} = 1;
            return 'please wait...<BR>';
        }
    }
    EOR
    

=head1 summary

    # [summary  amount=n.nn
    #           name=label*
    #           hide=1*
    #           total=1*
    #           reset=1*
    #           format="%.2f"*
    #           currency=1* ]
    #
    # Calculates column totals (if used properly. 8-\)
    # 
    #
    UserTag summary Order amount
    UserTag summary PosNumber 1
    UserTag summary addAttr
    UserTag summary Routine <<EOF
    use vars qw/%summary_hash/;
    sub {
        my ($amount, $opt) = @_;
    	my $name;
    	unless ($name = $opt->{name} ) {
    		$name = 'ONLY0000';
    		%summary_hash = () if Vend::Util::is_yes($opt->{reset});
    	}
    	else {
    		$summary_hash{$name} = 0 if Vend::Util::is_yes($opt->{reset});
    	}
    	$summary_hash{$name} += $amount if length $amount;
    	$amount = $summary_hash{$name} if Vend::Util::is_yes($opt->{total});
    	return '' if $opt->{hide};
    	return sprintf($opt->{format}, $amount) if $opt->{format};
        return Vend::Util::currency($amount) if $opt->{currency};
        return $amount;
    }
    EOF
    

=head1 title_bar

    #ifndef @UI_TAG_TITLE_BAR
    UserTag title-bar Order  width size color
    UserTag title-bar PosNumber 3
    UserTag title-bar Interpolate 1
    UserTag title-bar HasEndTag 1
    UserTag title-bar Routine <<EOR
    sub {
    	my ($width, $size, $color, $text) = @_;
    	$width = 500 unless defined $width;
    	$size = 6 unless defined $size;
    	$color = ($::Variable->{HEADERBG} || '#444444') unless defined $color;
    	$color = qq{BGCOLOR="$color"} unless $color =~ /^\s*bgcolor=/i;
    	my $tcolor = $::Variable->{HEADERTEXT} || 'WHITE';
    	$text = qq{<FONT COLOR="$tcolor" SIZE="$size">$text</FONT>};
    	return <<EOF;
    <TABLE CELLSPACING=0 CELLPADDING=6 WIDTH="$width"><TR><TD VALIGN=CENTER $color>$text</TD></TR></TABLE>
    EOF
    }
    EOR
    #endif

=head1 ups_query

    UserTag  ups-query  Order  mode origin zip weight country
    UserTag  ups-query  Routine <<EOR
    sub {
     	my( $mode, $origin, $zip, $weight, $country) = @_;
    	BEGIN {
    		eval {
    			require Business::UPS;
    			import Business::UPS;
    		};
    	};
    	$origin		= $::Variable->{UPS_ORIGIN}
    					if ! $origin;
    	$country	= $::Values->{$::Variable->{UPS_COUNTRY_FIELD}}
    					if ! $country;
    	$zip		= $::Values->{$::Variable->{UPS_POSTCODE_FIELD}}
    					if ! $zip;
    	$country = uc $country;
    	$country = undef if $country eq 'US';
    #::logGlobal("calling with: " . join("|", $mode, $origin, $zip, $weight, $country));
    	my ($shipping, $zone, $error) =
    		getUPS( $mode, $origin, $zip, $weight, $country);
    #::logGlobal("received back: " . join("|", $shipping, $zone, $error));
    	if($error) {
    		$Vend::Session->{ship_message} .= " $mode: $error";
    		return 0;
    	}
    	return $shipping;
    }
    EOR
    

=head1 usertrack

    
    UserTag usertrack Order tag value
    UserTag usertrack Routine sub { $Vend::Track->user(@_); }

=head1 var

    # [var name=variablename global=1]
    #
    # This tag is the equivalent of __VARIABLE__ except that it will
    # works in other variables
    #
    UserTag var Interpolate 1
    UserTag var PosNumber 2
    UserTag var Order name global
    UserTag var Routine <<EOR
    sub {
        $_[1] and return $Global::Variable->{shift @_};
        my $key = shift;
    	return $Vend::Cfg->{Member}{$key}
    		if	$Vend::Session->{logged_in}
    			&& defined $Vend::Cfg->{Member}{$key};
    	return $Vend::Cfg->{Variable}{$key};
    }
    EOR

=head1 xml_generator

    UserTag xml-generator Order type
    UserTag xml-generator addAttr
    UserTag xml-generator hasEndTag
    UserTag xml-generator Interpolate
    UserTag xml-generator Documentation <<EOD
    =head2 xml_generator
    
    This UserTag generates XML tags based upon one of two types of
    data:
    
    =over 4
    
    =item delimited
    
    Accepts a delimited and separated (default is TAB delimiter and newline sepraror)
    list of records such as that generated by an C<[item-list]>, C<[sql]>,
    or C<[loop search=""]> MML tag.
    
    =item session
    
    When the type is not delimited, it can contain any hash reference into
    the Interchange session. Examples are:
    
    	values       The form values
    	scratch      Scratch values
    	errors       Error values
    	other        Any other Session key, for example "source" for
    	             [data session source]
    
    If the value is a hash, then it will be sent as an XML record with the
    top level equal to C<session>, and a second_level tag equal to the hash
    name, and keys as separate XML container tags. If the paramater I<that is equal
    to the type> is given, only those fields will be shown. Otherwise the
    entire hash will be shown. For example, this tag:
    
    	[xml-generator type="values" values="fname lname"][/xml-generator]
    
    will generate:
    
    	<session>
    		<values>
    			<fname>First</fname>
    			<lname>Last</lname>
    		</values>
    	</session>
    
    it is a scalar, then only the second level will be done:
    
    	[xml-generator type="cybercash_id"][/xml-generator]
    	
    will do the equivalent of:
    
    	<session>
    		<cybercash_id>[data session cybercash_id]</cybercash_id>
    	</session>
    
    So bringing it all together, the following:
    
    	[xml-generator	type="values scratch source"
    					values="fname lname"
    					scratch="downloads"][/xml-generator]
    
    will generate:
    
    	<session>
    		<values>
    			<fname>First</fname>
    			<lname>Last</lname>
    		</values>
    		<scratch>
    			<downloads>0</downloads>
    		</scratch>
    		<source>Partner1</source>
    	</session>
    
    =back
    
    Other parameters include:
    
    =over 4
    
    =item toplevel_tag
    
    The toplevel tag name to use. Defaults to C<table> for the delimited type,
    and C<session> for the other.
    
    =item table_name
    
    A table name to output for the delimited type, i.e. 
    C<<>C<table name="table_name">C<>>.
    
    =item attributes
    
    The attributes (if any) to pass on to the top level tag. For instance,
    
    	[xml-generator
    			attributes="date"
    			date="[tag time]%d-%b-%Y[/tag]"
    			toplevel_tag=order
    			] 
    
    will generate a toplevel tag pair of:
    
    	<order date="05-Mar-2000">
    	</order>
    
    =item no_second
    
    Prevents the second-level tags from being generated. Extending the
    last example in the C<session> type above, this
    
    	[xml-generator	type="values scratch source"
    					no_second=1
    					values="fname lname"
    					scratch="downloads"][/xml-generator]
    
    
    will generate:
    
    	<session>
    		<fname>First</fname>
    		<lname>Last</lname>
    		<downloads>0</downloads>
    		<source>Partner1</source>
    	</session>
    
    	
    
    EOD
    
    UserTag xml-generator Routine <<EOR
    sub {
    	my ($type, $opt, $body) = @_;
    
    	my @fields;
    	my @lines;
    	my $out;
    	my $attr_string = '';
    	if($opt->{attributes}) {
    		my @attr = split /[\s,]+/, $opt->{attributes};
    		for(@attr) {
    			next unless length $opt->{$_};
    			my $v = $opt->{$_};
    			$v =~ s/"/\\"/g;
    			$attr_string .= qq{\n\t$_="$v"};
    		}
    	}
    	my %hash = (
    					spacer => '[\s,]+',
    					separator => "\n",
    					delimiter => "\t",
    					joiner => "\n",
    					n => "\n",
    					r => "\r",
    					f => "\f",
    					t => "\t",
    					0 => "\0",
    				);
    	for(qw/separator delimiter joiner spacer/) {
    		if($opt->{$_}) {
    			$opt->{$_} =~ s/\\([nrf0])/$hash{$1}/g;
    		}
    		else {
    			$opt->{$_} = $hash{$_};
    		}
    	}
    
    	$type = 'delimited' unless $type;
    	if($type eq 'delimited') {
    		my $delim = $opt->{delimiter};
    		if($opt->{field_names}) {
    			@fields = grep /\S/, split /[\s,]+/, $opt->{field_names};	
    		}
    		else {
    			$body =~ s/^(.*)\r?\n//;
    			$opt->{field_names} = $1;
    			$opt->{field_names} =~ s/\s+$//;
    			$opt->{field_names} =~ s/^\s+//;
    			@fields = grep /\S/, split /\t/, $opt->{field_names};	
    		}
    		$body =~ s/\s+$//;
    		@lines = split /$opt->{separator}/, $body;
    		$out = '<';
    		$out .= $opt->{toplevel_tag} || 'table';
    		$out .= $attr_string;
    		$out .= ">\n";
    		my $rtag = $opt->{record_tag} || 'record';
    		my $keypos = 0;
    		if($opt->{key_name}) {
    			my $i = -1;
    			my $found;
    			for (@fields) {
    				$i++;
    				next unless $_ eq $opt->{key_name};
    				$found = 1;
    				last;
    			}
    			$keypos = $i if $found;
    		}
    		for(@lines) {
    			warn "keypos=$keypos\n";
    			my @f = split /$delim/o, $_;
    			my $key = $f[$keypos];
    			$key =~ s/"/\\"/g;
    			$out .= qq{\t<$rtag key="$key">\n};
    			for (my $i = 0; $i < scalar @fields; $i++) {
    				$out .= qq{\t\t<$fields[$i]>$f[$i]</$fields[$i]>\n};
    			}
    			$out .= qq{\t</$rtag>\n};
    		}
    		$out .= "</";
    		$out .= $opt->{toplevel_tag} || 'table';
    		$out .= ">";
    	}
    	else {
    		my @ones = grep /\S/, split /$opt->{spacer}/, $type;
    		$out = '<';
    		$out .= $opt->{toplevel_tag} || 'session';
    		$out .= $attr_string;
    		$out .= ">\n";
    		my @keys;
    		for(@ones) {
    			my $ref = $_ eq 'CGI' ? \%CGI::values : ($Vend::Session->{$_} || {});
    			if($opt->{$_}) {
    				@keys = split /$opt->{spacer}/o, $opt->{$_};
    			}
    			else {
    				@keys = keys %$ref;
    			}
    			my $spacer;
    			if($opt->{no_second}) {
    				$spacer = "\t";
    			}
    			else {
    				$out .= qq{\t<$_>\n};
    				$spacer = "\t\t";
    			}
    			foreach my $k (@keys) {
    				$out .= qq{$spacer<$k>$ref->{$k}</$k>$opt->{separator}};
    			}
    			$out .= qq{\t</$_>\n}
    				unless $opt->{no_second};
    		}
    		$out .= "</";
    		$out .= $opt->{toplevel_tag} || 'session';
    		$out .= ">";
    	}
    	return $out;
    }
    EOR

=head1 formel

	#
	# UserTag formel - see POD documentation for more information
	#
	# Copyright 2000 by Stefan Hornburg &lt;racke@linuxia.de>
	#
	# This program is free software; you can redistribute it and/or modify
	# it under the terms of the GNU General Public License as published by
	# the Free Software Foundation; either version 2 of the License, or
	# (at your option) any later version.
	#
	# This program is distributed in the hope that it will be useful,
	# but WITHOUT ANY WARRANTY; without even the implied warranty of
	# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	# GNU General Public License for more details.
	#
	# You should have received a copy of the GNU General Public
	# License along with this program; if not, write to the Free
	# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
	# MA  02111-1307  USA.

	UserTag formel Order label name type size
	# may be should place version information on user-defined tags
	# UserTag formel Version 0.01
	UserTag formel addAttr
	UserTag formel Routine &lt;&lt;EOF
	sub {
		my ($label, $name, $type, $size, $opt) = @_;
		my ($labelhtml, $elhtml, $fmt);
		my $contrast = $::Variable->{CONTRAST} || 'red';
		
		# set defaults
		$type = 'text' unless $type;

		for ('format', 'order', 'reset') {
			next if $opt->{$_};
			if ($::Values->{"mv_formel_$_"}) {
				$opt->{$_} = $::Values->{"mv_formel_$_"};
			}   
		}
		
		if ($opt->{'format'}) {
			$fmt = $opt->{'format'};
		} else {
			$fmt = '%s %s';
		}

		if ($Tag->error($name)) {
			$labelhtml = "&lt;font color=\"$contrast\">$label&lt;/font>";
		} else {      
			$labelhtml = $label;
		}

		if ($opt->{reset}) {
			$elhtml = "&lt;input type=$type name=$name>";
		} else {
			$elhtml = "&lt;input type=$type name=$name value=\"$::Values->{$name}\">";
		}

		if ($opt->{order}) {
			# display form element first
			sprintf ($fmt, $elhtml, $labelhtml);
		} else {
			# display label first
			sprintf ($fmt, $labelhtml, $elhtml);
		}
	}
	EOF
	UserTag formel Documentation &lt;&lt;EOD
	=head2 formel

	This tag generates a HTML form element. It preserves the user input from
	the last display of the current page and looks for
	input value errors (using the C&lt;error> tag). 
	The user-visible description will be displayed
	in the color defined by the variable C&lt;CONTRAST> or in red if the
	variable is not set.

	Parameters for this tag are:

	=over 4

	=item label

	The user-visible description of the form element's purpose.

	=item name

	The name of the form element which appears in the C&lt;NAME>
	attribute of the HTML tag.

	=back

	Other options are:

	=item order

	Whether the user-visible description or the form element
	comes first. Default is the first (order=0).

	=item format

	The container format string for the label and the form element.
	The default is C&lt;%s %s>. 

	=item reset

	Discards the user input if set to 1.

	=back

	You can set defaults for format, order and reset with the corresponding
	mv_formel_... form variable values, e.g.:

		[value name="mv_formel_format" set="&lt;TR>&lt;TD>%s&lt;/TD>&lt;TD>%s&lt;/TD>&lt;/TR>" hide=1]
		[value name="mv_formel_order" set=1 hide=1]
		
	EOD




